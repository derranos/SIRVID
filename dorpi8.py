import matplotlib.pyplot as plt

def dopri8(f, t0, y0, t_end, h):
    # Коэффициенты метода Дорманда-Принца 8-го порядка
    c = [0, 1/18, 1/12, 1/8, 5/16, 3/8, 59/400, 93/200, 5490023248/9719169821, 13/20, 1201146811/1299019798, 1, 1]
    a = [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [1/18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [1/48, 1/16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [1/32, 0, 3/32, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [5/16, 0, -75/64, 75/64, 0, 0, 0, 0, 0, 0, 0, 0],
        [3/80, 0, 0, 3/16, 3/20, 0, 0, 0, 0, 0, 0, 0],
        [29443841/614563906, 0, 0, 77736538/692538347, -28693883/1125000000, 23124283/1800000000, 0, 0, 0, 0, 0, 0],
        [16016141/946692911, 0, 0, 61564180/158732637, 22789713/633445777, 545815736/2771057229, -180193667/1043307555, 0, 0, 0, 0, 0],
        [39632708/573591083, 0, 0, -433636366/683701615, -421739975/2616292301, 100302831/723423059, 790204164/839813087, 800635310/3783071287, 0, 0, 0, 0],
        [246121993/1340847787, 0, 0, -37695042795/15268766246, -309121744/1061227803, -12992083/490766935, 6005943493/2108947869, 393006217/1396673457, 123872331/1001029789, 0, 0, 0],
        [-1028468189/846180014, 0, 0, 8478235783/508512852, 1311729495/1432422823, -10304129995/1701304382, -48777925059/3047939560, 15336726248/1032824649, -45442868181/3398467696, 3065993473/597172653, 0, 0],
        [185892177/718116043, 0, 0, -3185094517/667107341, -477755414/1098053517, -703635378/230739211, 5731566787/1027545527, 5232866602/850066563, -4093664535/808688257, 3962137247/1805957418, 65686358/487910083, 0],
        [403863854/491063109, 0, 0, -5068492393/434740067, -411421997/543043805, 652783627/914296604, 11173962825/925320556, -13158990841/6184727034, 3936647629/1978049680, -160528059/685178525, 248638103/1413531060, 0]
    ]
    b = [14005451/335480064, 0, 0, 0, 0, -59238493/1068277825, 181606767/758867731, 561292985/797845732, -1041891430/1371343529, 760417239/1151165299, 118820643/751138087, -528747749/2220607170, 1/4]

    t = t0
    y = y0
    t_values = [t0]
    y_values = [y0]
    while t < t_end:
        if t + h > t_end:
            h = t_end - t
        k = [0] * 13
        for i in range(13):
            sum_ajk = sum(a[i][j] * k[j] for j in range(i))
            k[i] = h * f(t + c[i] * h, [y[j] + sum_ajk for j in range(len(y))])
        y = [y[j] + sum(b[i] * k[i][j] for i in range(13)) for j in range(len(y))]
        t = t + h
        t_values.append(t)
        y_values.append(y)
    return t_values, y_values

def model(t, y):
    S, I, R, V, D = y
    N = S + I + R + V + D
    dSdt = -beta * I * S / N + sigma * R - alpha * S
    dIdt = beta * I * S / N - gamma * I - delta * I
    dRdt = gamma * I - sigma * R
    dVdt = alpha * S
    dDdt = delta * I
    return [dSdt, dIdt, dRdt, dVdt, dDdt]

# Параметры модели
beta = 0.3
gamma = 0.1
delta = 0.05
alpha = 0.02
sigma = 0.01
N = 1000

# Начальные условия
S0 = 990
I0 = 10
R0 = 0
V0 = 0
D0 = 0
y0 = [S0, I0, R0, V0, D0]

# Временные параметры
t0 = 0
t_end = 100
h = 0.1

# Решение системы ОДУ
t_values, y_values = dopri8(model, t0, y0, t_end, h)

# Извлечение результатов
S_values = [y[0] for y in y_values]
I_values = [y[1] for y in y_values]
R_values = [y[2] for y in y_values]
V_values = [y[3] for y in y_values]
D_values = [y[4] for y in y_values]

# Построение графиков
plt.figure(figsize=(10, 6))
plt.plot(t_values, S_values, label='Susceptible (S)')
plt.plot(t_values, I_values, label='Infected (I)')
plt.plot(t_values, R_values, label='Recovered (R)')
plt.plot(t_values, V_values, label='Vaccinated (V)')
plt.plot(t_values, D_values, label='Deceased (D)')
plt.xlabel('Time')
plt.ylabel('Population')
plt.title('Epidemic Model')
plt.legend()
plt.grid(True)
plt.show()
